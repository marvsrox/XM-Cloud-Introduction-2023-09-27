import type { ReactNode, ReactElement, JSXElementConstructor } from 'react';
import { FEAASBase } from './FEAASBase.js';
export type ReactModules = {
    React: typeof React;
    ReactDOM: typeof ReactDOM;
};
export type ReactJSX = ReactNode | ReactElement<any, string | JSXElementConstructor<any>>;
export type FEAASReactRender<P> = {
    (this: FEAASElement<P>, props: P, payload: ReactModules): ReactJSX;
};
export default class FEAASElement<P> extends FEAASBase<P, ReactModules> {
    load(): Promise<{
        React: any;
        ReactDOM: any;
    }>;
    render({}: P, { React }: ReactModules): ReactJSX;
}
interface MyComponentProps {
    counter: string;
}
export declare class MyComponent extends FEAASElement<MyComponentProps> {
    static observedAttributes: string[];
    useShadowRoot: boolean;
    getProps(): {
        counter: number;
    };
    render({ counter }: MyComponentProps, { React }: ReactModules): ReactJSX;
}
export {};
//# sourceMappingURL=FEAASElement.d.ts.map