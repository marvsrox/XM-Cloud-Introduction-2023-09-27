/// <reference types="react" resolution-mode="require"/>
import type * as FEAASEditorImports from '@sitecore-feaas/frontend/editor';
import { FEAASBase, OptionalExcept } from '../components/FEAASBase.js';
import { FEAASLoader } from '../components/FEAASLoader.js';
export declare function getFramePosition(element: HTMLElement): {
    left: number;
    top: number;
};
export declare function FEAASEditorProps(element?: FEAASBase): {
    context: {
        new (): HTMLElement;
        prototype: HTMLElement;
    };
    frontend: string;
    src: string;
    library: string;
    component: string;
    version: string;
    instance: string;
    forked: string;
    revision: string;
    hidden: boolean;
    for: string;
    state: string;
    changed: boolean;
};
type FEAASEditorProps = ReturnType<typeof FEAASEditorProps>;
type Rect = {
    top: number;
    left: number;
    width: number;
    height: number;
};
export declare class FEAASEditor extends FEAASBase<FEAASEditorProps, typeof FEAASEditorImports> {
    framePoint: Pick<Rect, 'top' | 'left'>;
    wrapperRect: Rect;
    bodyRect: Rect;
    static observedAttributes: string[];
    defaultProps: Partial<{
        context: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
        frontend: string;
        src: string;
        library: string;
        component: string;
        version: string;
        instance: string;
        forked: string;
        revision: string;
        hidden: boolean;
        for: string;
        state: string;
        changed: boolean;
    }>;
    getProps(): {
        context: {
            new (): HTMLElement;
            prototype: HTMLElement;
        };
        frontend: string;
        src: string;
        library: string;
        component: string;
        version: string;
        instance: string;
        forked: string;
        revision: string;
        hidden: boolean;
        for: string;
        state: string;
        changed: boolean;
    };
    reactRootElement: HTMLDivElement;
    getReactRootElement(): HTMLDivElement;
    target: HTMLElement;
    setTarget: (element: HTMLElement, props?: {
        component: string;
        version: string;
        revision: string;
        instance: string;
    }) => boolean;
    showLoader(): void;
    hideLoader(): void;
    load(): Promise<any>;
    onChromeMeasureElement: (element: HTMLElement, rect?: Rect) => {
        left: number;
        top: number;
        width: number;
        height: number;
    };
    onBeforeMeasure: FEAASEditorImports.EditorContext['onChromeBeforeMeasure'];
    onMeasure: FEAASEditorImports.EditorContext['onChromeMeasure'];
    onPosition: FEAASEditorImports.EditorContext['onChromePosition'];
    onWindowMessage: (event: MessageEvent) => void;
    connectedCallback(): void;
    disconnectedCallback(): void;
    onContentChange: () => void;
    iframe: HTMLIFrameElement;
    setIframe(iframe: HTMLIFrameElement): void;
    setIframeComponentContent(): void;
    setPlaceholder(): void;
    chrome: {
        positionable: HTMLDivElement;
        absolute: HTMLDivElement;
        wrapper: HTMLDivElement;
    };
    measurements: Record<string, DOMRect>;
    editedUID: string;
    placeholder: {
        clipper: HTMLDivElement;
        positionable: HTMLDivElement;
        editable: HTMLDivElement;
        loader: FEAASLoader;
    };
    loader: FEAASLoader;
    getPlaceholder(): {
        clipper: HTMLDivElement;
        positionable: HTMLDivElement;
        editable: HTMLDivElement;
        loader: FEAASLoader;
    };
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    open(): void;
    shouldFork(version: FEAASEditorImports.SDK.VersionModel): boolean;
    cleanup(): void;
    onClose: () => void;
    close(): void;
    unfork(): void;
    discard(): void;
    save(): void;
    versionContext: FEAASEditorImports.VersionContext;
    setVersionContext(props: Partial<FEAASEditorImports.VersionContext>): void;
    onVersionStateChange: (versionContext: FEAASEditorImports.VersionContext, setVersionContext: (context: Partial<FEAASEditorImports.VersionContext>) => void) => void;
    editorContext: FEAASEditorImports.EditorContext;
    setEditorContext(props: Partial<FEAASEditorImports.EditorContext>): void;
    onEditorStateChange: (editorContext: FEAASEditorImports.EditorContext, setEditorContext: (context: Partial<FEAASEditorImports.EditorContext>) => void) => void;
    setLoadingState(): void;
    setReadyState(): void;
    component: FEAASEditorImports.SDK.ComponentModel;
    version: FEAASEditorImports.SDK.VersionModel;
    closing: ReturnType<typeof setTimeout>;
    render({ children, component: componentId, version: versionId, instance: instanceId }: React.PropsWithChildren<FEAASEditorProps>, { Editor, VersionStatusList, VersionStatusButton, Version, VersionMenu, EditorUIUndo, EditorUIMode, React: { useEffect, useMemo, useState, useContext }, Chakra: { HStack, Box, Button, MenuItem }, Chrome, ReactDOM, useSDK, useSlots, useModelObserver, ConfirmationContext, VersionContext }: typeof FEAASEditorImports): FEAASEditorImports.React.ReactElement<any, string | FEAASEditorImports.React.JSXElementConstructor<any>>;
    isReadyToLoad(): boolean;
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            'feaas-editor': OptionalExcept<FEAASEditorProps, 'component' | 'version'>;
        }
    }
}
export {};
//# sourceMappingURL=FEAASEditor.d.ts.map