/// <reference types="react" resolution-mode="require"/>
import type * as FEAASContextImports from '@sitecore-feaas/frontend/context';
import { FEAASBase, OptionalExcept } from '../components/FEAASBase.js';
export declare function FEAASContextProps(element?: HTMLElement): {
    library: string;
    src: string;
    frontend: string;
    backend: string;
    cdn: string;
    auth: Partial<FEAASContextImports.SDK.AuthModel>;
    isolate: boolean;
};
export type FEAASContextProps = ReturnType<typeof FEAASContextProps>;
/**
 * Context provides shared parameters and react providers for its nested elements. It loads lazily once any of its
 * nested components load. Just placing it on the page without any consumers does not impose any overhead.
 */
export declare class FEAASContext extends FEAASBase<FEAASContextProps, typeof FEAASContextImports> {
    static observedAttributes: string[];
    getProps(): {
        library: string;
        src: string;
        frontend: string;
        backend: string;
        cdn: string;
        auth: Partial<FEAASContextImports.SDK.AuthModel>;
        isolate: boolean;
    };
    defaultProps: Partial<{
        library: string;
        src: string;
        frontend: string;
        backend: string;
        cdn: string;
        auth: Partial<FEAASContextImports.SDK.AuthModel>;
        isolate: boolean;
    }>;
    load(): Promise<typeof FEAASContextImports>;
    isReadyToLoad(): boolean;
    getTheme(theme: FEAASContextImports.Chakra.Theme): FEAASContextImports.Chakra.Theme;
    getRoot(): HTMLElement | FEAASBase<any, any> | ShadowRoot;
    reactRootElement: HTMLDivElement;
    getReactRootElement(): HTMLDivElement;
    /** Pull in children FEAAS react elements into the shadow DOM so they receieve the styles */
    connectedCallback(): void;
    onStatusChange: (status: string) => void;
    render({ children, library }: React.PropsWithChildren<FEAASContextProps>, { AppContext, Chakra: { Button, Tooltip }, React }: typeof this.payload): JSX.Element;
}
declare global {
    namespace JSX {
        interface IntrinsicElements {
            'feaas-context': OptionalExcept<FEAASContextProps, 'library'>;
        }
    }
}
//# sourceMappingURL=FEAASContext.d.ts.map