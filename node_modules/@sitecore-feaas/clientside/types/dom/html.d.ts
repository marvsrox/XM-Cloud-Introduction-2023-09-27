/** Lightweight DOM parser and serializer to use in server environments */
import { Datascopes } from './data.js';
import { FEAASCustomizations } from './rendering.js';
type HTMLAttribute = {
    name: string;
    value: string;
};
declare class HTMLNode {
    nodeName: string;
    nodeType: number;
    textContent?: string;
    attributes: HTMLAttribute[];
    childNodes: HTMLNode[];
    parentNode?: HTMLNode;
    constructor(nodeName: string, nodeType?: number, textContent?: string);
    setAttribute(name: string, value: string): void;
    getAttribute(name: string): string | undefined;
    insertBefore(newNode: HTMLNode, referenceNode: HTMLNode | null): void;
    removeAttribute(attrName: string): void;
    appendChild(newNode: HTMLNode): void;
    get tagName(): string;
    get innerHTML(): string;
    set innerHTML(html: string);
    get outerHTML(): string;
    closest(selector: string): HTMLNode | null;
    querySelectorAll(selector: string): HTMLNode[];
    querySelector(selector: string): HTMLNode;
    private findSibling;
    removeChild(child: HTMLNode): HTMLNode;
    get previousSibling(): HTMLNode | null;
    get nextSibling(): HTMLNode | null;
    get previousElementSibling(): HTMLNode | null;
    get nextElementSibling(): HTMLNode | null;
    cloneNode(deep?: boolean): HTMLNode;
    get parentElement(): HTMLNode;
    ownerDocument: {
        createElement(name: string): HTMLNode;
    };
}
export declare function parseHTML(html: string): HTMLNode[];
export declare function escapeHTML(input: string): string;
export declare function serializeHTML(nodes: HTMLNode[]): string;
export declare function renderHTMLContent(template: string, data?: Datascopes, config?: FEAASCustomizations): string;
export {};
//# sourceMappingURL=html.d.ts.map