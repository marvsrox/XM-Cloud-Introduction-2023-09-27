import { beforeEach, describe, it, assert, beforeAll, expect } from 'vitest'
import { FEAASBase, ReactPayload } from '../src/headless.js'
import { FEAASPickerProps, FEAASPicker } from '../src/ui/FEAASPicker.js'
import { JSDOM } from 'jsdom'
import { vi } from 'vitest'

describe('React', function () {
  describe('FEAASPicker', () => {
    beforeEach(() => {
      document.write()
    })
    it('should initiate loading', async () => {
      // @ts-ignore
      const spyLoad = vi.spyOn(FEAASPicker.prototype, 'import')
      // @ts-ignore
      spyLoad.mockImplementation(async (url: string) => {
        if (url.match('test.js')) {
          return Promise.all([import('react'), import('react-dom'), import('react-dom/client')]).then(
            ([React, ReactDOM, ReactDOMClient]) => {
              return { React, ReactDOM, ReactDOMClient, Picker: () => <p>Picker</p> }
            }
          )
        }
      })
      const spyRender = vi.spyOn(FEAASPicker.prototype, 'render')
      spyRender.mockImplementation((props: React.PropsWithChildren<FEAASPickerProps>, { React, Picker }) => {
        return <Picker>123</Picker>
      })
      // Fixme change to production component
      document.body.innerHTML = '<feaas-picker src="test.js"></feaas-picker>'

      const component = document.body.firstElementChild as FEAASPicker

      await expect(component.whenRendered).resolves.toEqual(component)
      expect(spyLoad).toHaveBeenCalledTimes(1)

      expect(component.innerHTML).toContain('Picker')
    })
  })
})
