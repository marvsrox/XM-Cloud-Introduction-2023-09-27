import { beforeEach, describe, it, assert, beforeAll, expect } from 'vitest'
import { FEAASBase, ReactPayload } from '../src/headless.js'
import { FEAASContextProps, FEAASContext } from '../src/ui/FEAASContext.js'
import { JSDOM } from 'jsdom'
import { vi } from 'vitest'

describe('React', function () {
  describe('FEAASContext', () => {
    beforeEach(() => {
      document.write()
    })
    it('should initiate loading with isolation', async () => {
      // @ts-ignore
      const spyLoad = vi.spyOn(FEAASContext.prototype, 'import')
      // @ts-ignore
      spyLoad.mockImplementation(async (url: string) => {
        if (url.match('test.js')) {
          return Promise.all([import('react'), import('react-dom'), import('react-dom/client')]).then(
            ([React, ReactDOM, ReactDOMClient]) => {
              return {
                React,
                ReactDOM,
                ReactDOMClient,
                Chakra: { Tooltip: {} },
                AppContext: ({ libraryId }: any) => <p>Context {libraryId}</p>
              }
            }
          )
        }
      })
      // Fixme change to production component
      document.body.innerHTML = '<feaas-context src="test.js" library="abc" isolate="false"></feaas-context>'

      const component = document.body.firstElementChild as FEAASContext

      await expect(component.whenRendered).resolves.toEqual(component)
      expect(spyLoad).toHaveBeenCalledTimes(1)

      expect(component.outerHTML).toBe(
        '<feaas-context src="test.js" library="abc" isolate="false" frontend="https://components.sitecoreclud.io" backend="https://components.sitecoreclud.io/api" cdn="https://feaas.blob.core.windows.net"><div><p>Context abc</p></div></feaas-context>'
      )
    })
  })
  it('should initiate loading without isolation', async () => {
    // @ts-ignore
    const spyLoad = vi.spyOn(FEAASContext.prototype, 'import')
    // @ts-ignore
    spyLoad.mockImplementation(async (url: string) => {
      if (url.match('test.js')) {
        return Promise.all([import('react'), import('react-dom'), import('react-dom/client')]).then(
          ([React, ReactDOM, ReactDOMClient]) => {
            return {
              React,
              ReactDOM,
              ReactDOMClient,
              Chakra: { Tooltip: {} },
              AppContext: ({ libraryId }: any) => <p>Context {libraryId}</p>
            }
          }
        )
      }
    })
    // Fixme change to production component
    document.body.innerHTML = '<feaas-context src="test.js" library="abc"></feaas-context>'

    const component = document.body.firstElementChild as FEAASContext

    await expect(component.whenRendered).resolves.toEqual(component)
    expect(spyLoad).toHaveBeenCalledTimes(1)

    expect(component.outerHTML).toBe(
      '<feaas-context src="test.js" library="abc" frontend="https://components.sitecoreclud.io" backend="https://components.sitecoreclud.io/api" cdn="https://feaas.blob.core.windows.net"></feaas-context>'
    )
    expect(component.shadowRoot.innerHTML).toBe('<div><p>Context abc</p></div>')
  })
})
