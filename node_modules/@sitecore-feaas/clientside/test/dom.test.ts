import { JSDOM } from 'jsdom'
import * as FEAAS from '../src/headless.js'
import * as FEAASReact from '../src/ui/react.js'
import { describe, it, assert, beforeAll } from 'vitest'
import { parseHTML, serializeHTML } from '../src/dom/html.js'

function assertScriptLoaded(element: HTMLElement, src: string) {
  assert.equal(
    Array.prototype.find
      .call(element.querySelectorAll('script'), (s: HTMLScriptElement) => s.getAttribute('src') == src)
      ?.getAttribute('src'),
    src
  )
}
function normalize(str: string) {
  return (
    str
      .replace(/>\s*</g, '><')
      .replace(/^\s+|\n/gm, '')
      .replace(/>/g, '>\n')
      .replace(/\n+/g, '\n')
      .replace(/<\//g, '\n</')
      .replace(/<\/?body[^>]*>/g, '')
      .replace(/<img([^>]*?) ?\/?>/gi, '<img$1 />')
      // sort attributes
      .replace(/<([a-z0-9-]+) ([^>]+?)(\s?\/?)>/g, (m, tag, attrs, closer = '') => {
        const matches = attrs.match(/\b([\w-]+)(?:\s*=\s*("[^"]*"|'[^']*'|[^'">\s]+))?/g)
        if (!matches) return m
        matches.sort()
        return '<' + tag + ' ' + matches.join(' ') + closer + '>'
      })
      .trim()
  )
}

const doc = new JSDOM('').window.document
function assertRenderedHTML(
  input: string,
  data: any,
  expected: string,
  scripts?: string[],
  customizations?: FEAAS.FEAASCustomizations,
  ignoreHTML = false
) {
  const element = doc.createElement('body')
  const rendered = FEAAS.renderDOMContent(element, input, data, customizations)
  assert.equal(normalize(rendered?.outerHTML), normalize(expected))
  if (scripts) {
    scripts.map((s) => assertScriptLoaded(rendered, s))
  }

  if (!ignoreHTML) {
    assert.equal(normalize(FEAAS.renderHTMLContent(input, data, customizations)), normalize(expected))

    assert.equal(
      normalize(FEAASReact.renderHTMLContent('<body>' + input + '</body>', data, customizations)),
      normalize('<body>' + expected + '</body>')
    )
  }
}
describe('HTML Parser', () => {
  it('should handle basic parsing', function () {
    const testCases = [
      '<div id="container"><span>Hello</span> World</div>',
      '<ul><li>Item 1</li><li>Item 2</li></ul>',
      '<a href="https://example.com">Visit our site</a>',
      '<p title="A &quot;quote&quot; inside an attribute">Text with "quote"</p>',
      '<div onclick="alert(&#x27;Hello &amp; welcome!&#x27;)">Click me</div>',
      '<input type="text" value="&amp;&quot;&#x27;" />',
      'Text &amp; <strong>HTML</strong> mixed'
    ]
    testCases.forEach((c: string) => {
      assert.equal(serializeHTML(parseHTML(c)), c)
    })
  })
})
describe('DOM Clientside', function () {
  describe('render without data', function () {
    it('should render element', function () {
      assertRenderedHTML(`<div></div>`, null, '<div></div>')
    })
    it('should render nested', function () {
      assertRenderedHTML(`<div><img /></div>`, null, '<div><img /></div>')
    })
  })
  describe('render with data', function () {
    it('should render mapped attribute', function () {
      assertRenderedHTML(
        `<div><img data-path-src="image" /></div>`,
        { image: 'a.jpg' },
        '<div><img data-path-src="image" src="a.jpg" /></div>'
      )
    })
    it('should render mapped attribute', function () {
      assertRenderedHTML(
        `<div><img data-path-src="image" /></div>`,
        { image: null },
        '<div><img data-path-src="image" /></div>'
      )
    })
    it('should not render missing attribute', function () {
      assertRenderedHTML(
        `<div><img data-path-src="context.z" /></div>`,
        { image: 'a.jpg' },
        '<div><img data-path-src="context.z" /></div>'
      )
    })
    it('should fall back to catch all datasource', function () {
      assertRenderedHTML(
        `<div><img data-path-src="context.image" /></div>`,
        { _: { image: 'a.jpg' } },
        '<div><img data-path-src="context.image" src="a.jpg" /></div>'
      )
    })
    it('should fall back to catch root', function () {
      assertRenderedHTML(
        `<div><img data-path-src="context.image" /></div>`,
        { image: 'a.jpg' },
        '<div><img data-path-src="context.image" src="a.jpg" /></div>'
      )
    })
    it('should fall back to trimmed path', function () {
      assertRenderedHTML(
        `<div><img data-path-src="context.test.$.image" /></div>`,
        { context: { image: 'a.jpg' } },
        '<div><img data-path-src="context.test.$.image" src="a.jpg" /></div>'
      )
    })
    it('should fall back to catch all datasource only if path matches', function () {
      assertRenderedHTML(
        `<div><img data-path-src="context.image" /></div>`,
        { _: { z: 'a.jpg' } },
        '<div><img data-path-src="context.image" /></div>'
      )
    })
    it('should render custom attribute', function () {
      assertRenderedHTML(
        `<div data-path-custom-attribute="test"></div>`,
        { test: 'a.jpg' },
        '<div data-path-custom-attribute="test" custom-attribute="a.jpg"></div>'
      )
      assertRenderedHTML(
        `<div data-path-custom-attribute="test"></div>`,
        { missing: 'a.jpg' },
        '<div data-path-custom-attribute="test"></div>'
      )
    })
    it('should render attributes object', function () {
      assertRenderedHTML(
        `<div data-path-attributes="test"></div>`,
        { test: { a: 'a.jpg', b: 2, c: { user: 'yarik' } } },
        '<div data-path-attributes="test" a="a.jpg" b="2" c="{&quot;user&quot;:&quot;yarik&quot;}" data-attributes-keys="a,b,c"></div>'
      )
    })
    it('should render attributes in dynamic html', function () {
      assertRenderedHTML(
        `<div data-path="html"></div>`,
        { html: '<img data-path-src="image" />', image: '1.jpg' },
        '<div data-path="html"><img data-path-src="image" src="1.jpg" /></div>'
      )
      assertRenderedHTML(
        `<div data-path-custom-attribute="test"></div>`,
        { missing: 'a.jpg' },
        '<div data-path-custom-attribute="test"></div>'
      )
      assertRenderedHTML(
        `<div data-path-custom-attribute="test"></div>`,
        { test: null },
        '<div data-path-custom-attribute="test"></div>'
      )
    })
    it('should render content hub docs as html', function () {
      assertRenderedHTML(
        `<div data-path="html"></div>`,
        {
          html: {
            type: 'doc',
            content: [
              { type: 'heading', attrs: { level: 1 }, content: [{ type: 'text', text: 'Title 1' }] },
              { type: 'paragraph', content: [{ type: 'text', text: 'Thing 1' }] }
            ]
          }
        },
        '<div data-path="html"><h1>Title 1</h1><p>Thing 1</p></div>'
      )
      assertRenderedHTML(
        `<div data-path-custom-attribute="test"></div>`,
        { missing: 'a.jpg' },
        '<div data-path-custom-attribute="test"></div>'
      )
    })
    it('should fill parent link via attribute', function () {
      assertRenderedHTML(
        `<div><a><var data-path-href="image" data-path="image"></var></a></div>`,
        { image: 'a.jpg' },
        '<div><a href="a.jpg"><var data-path-href="image" data-path="image">a.jpg</var></a></div>'
      )
    })
    it('should fill child element via attribute', function () {
      assertRenderedHTML(
        `<div data-path-href="image"><a><var data-path="image"></var></a></div>`,
        { image: 'a.jpg' },
        '<div data-path-href="image"><a href="a.jpg"><var data-path="image">a.jpg</var></a></div>'
      )
    })
    it('should fill image element via attribute', function () {
      assertRenderedHTML(
        `<div data-path-href="image"><a><var data-path="image"></var></a></div>`,
        { image: 'a.jpg' },
        '<div data-path-href="image"><a href="a.jpg"><var data-path="image">a.jpg</var></a></div>'
      )
    })
  })
  describe('render with arrays', () => {
    it('should repeat element for primitive value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"></h1></div>`,
        { outside: [{ items: ['a', 'b'] }] },
        '<div><h1 data-path-scope="outside.*.items.*"></h1><h1 data-path-scope="outside.*.items.*"></h1></div>'
      )
    })
    it('should repeat element for primitive value with fallback', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"></h1></div>`,
        { _: [{ items: ['a', 'b'] }] },
        '<div><h1 data-path-scope="outside.*.items.*"></h1><h1 data-path-scope="outside.*.items.*"></h1></div>'
      )
    })
    it('should repeat and fill element for primitive value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*"></var></h1></div>`,
        { outside: [{ items: ['a', 'b'] }] },
        `<div>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">a</var></h1>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">b</var></h1>
                </div>`
      )
    })
    it('should repeat element for object value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"></h1></div>`,
        { outside: [{ items: [{ a: '1' }, { a: '2' }] }] },
        '<div><h1 data-path-scope="outside.*.items.*"></h1><h1 data-path-scope="outside.*.items.*"></h1></div>'
      )
    })
    it('should repeat element for object value with fallback', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"></h1></div>`,
        { _: [{ items: [{ a: '1' }, { a: '2' }] }] },
        '<div><h1 data-path-scope="outside.*.items.*"></h1><h1 data-path-scope="outside.*.items.*"></h1></div>'
      )
    })
    it('should repeat element for object value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*.title"></var></h1></div>`,
        { outside: [{ items: [{ title: '1' }, { title: '2' }] }] },
        `<div>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">1</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">2</var>
                </h1>
            </div>`
      )
    })
    it('should repeat element for object value thrice', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*.title"></var></h1></div>`,
        { outside: [{ items: [{ title: '0' }, { title: '1' }, { title: '2' }] }] },
        `<div>
            <h1 data-path-scope="outside.*.items.*">
                <var data-path="outside.*.items.*.title">0</var>
            </h1>
            <h1 data-path-scope="outside.*.items.*">
                <var data-path="outside.*.items.*.title">1</var>
            </h1>
            <h1 data-path-scope="outside.*.items.*">
                <var data-path="outside.*.items.*.title">2</var>
            </h1>
        </div>`
      )
    })
    it('should repeat element for jsonpath', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="items[1:3]"><var data-path="items.*.title"></var></h1></div>`,
        { items: [{ title: '0' }, { title: '1' }, { title: '2' }] },
        `<div>
                <h1 data-path-scope="items[1:3]">
                    <var data-path="items.*.title">1</var>
                </h1>
                <h1 data-path-scope="items[1:3]">
                    <var data-path="items.*.title">2</var>
                </h1>
            </div>`
      )
    })
  })
  describe('render with nested arrays', () => {
    it('should repeat element for primitive value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"></h1></div>`,
        { outside: [{ items: ['a', 'b'] }] },
        '<div><h1 data-path-scope="outside.*.items.*"></h1><h1 data-path-scope="outside.*.items.*"></h1></div>'
      )
    })
    it('should repeat and fill element for primitive value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*"></var></h1></div>`,
        { outside: [{ items: ['a', 'b'] }] },
        `<div>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">a</var></h1>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">b</var></h1>
                </div>`
      )
    })
    it('should repeat element for object value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"></h1></div>`,
        { outside: [{ items: [{ a: '1' }, { a: '2' }] }] },
        '<div><h1 data-path-scope="outside.*.items.*"></h1><h1 data-path-scope="outside.*.items.*"></h1></div>'
      )
    })
    it('should repeat element for object value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*.title"></var></h1></div>`,
        { outside: [{ items: [{ title: '1' }, { title: '2' }] }] },
        `<div>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">1</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">2</var>
                </h1>
            </div>`
      )
    })
    it('should repeat element for object value thrice', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*.title"></var></h1></div>`,
        { outside: [{ items: [{ title: '0' }, { title: '1' }, { title: '2' }] }] },
        `<div>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">0</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">1</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">2</var>
                </h1>
            </div>`
      )
    })
    it('should repeat element for jsonpath', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items[1:3]"><var data-path="outside.*.items.*.title"></var></h1></div>`,
        { outside: [{ items: [{ title: '0' }, { title: '1' }, { title: '2' }] }] },
        `<div>
                <h1 data-path-scope="outside.*.items[1:3]">
                    <var data-path="outside.*.items.*.title">1</var>
                </h1>
                <h1 data-path-scope="outside.*.items[1:3]">
                    <var data-path="outside.*.items.*.title">2</var>
                </h1>
            </div>`
      )
    })
  })

  describe('render multiplied with nested arrays and without parent context', () => {
    it('should repeat element for primitive value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"></h1></div>`,
        { outside: [{ items: ['a', 'b'] }, { items: ['a', 'b', 'c'] }] },
        `<div>
                <h1 data-path-scope="outside.*.items.*"></h1>
                <h1 data-path-scope="outside.*.items.*"></h1>
                <h1 data-path-scope="outside.*.items.*"></h1>
                <h1 data-path-scope="outside.*.items.*"></h1>
                <h1 data-path-scope="outside.*.items.*"></h1>
                </div>`
      )
    })
    it('should repeat and fill element for primitive value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*"></var></h1></div>`,
        { outside: [{ items: ['a', 'b'] }, { items: ['a', 'b', 'c'] }] },
        `<div>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">a</var></h1>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">b</var></h1>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">a</var></h1>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">b</var></h1>
                    <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">c</var></h1>
                </div>`
      )
    })
    it('should repeat element for object value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"></h1></div>`,
        { outside: [{ items: [{ a: '1' }, { a: '2' }] }, { items: [{ a: '1' }, { a: '2' }, { c: '3' }] }] },
        `<div>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                </div>`
      )
    })
    it('should repeat element for object value', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*.title"></var></h1></div>`,
        {
          outside: [
            { items: [{ title: '1' }, { title: '2' }] },
            { items: [{ title: '1' }, { title: '2' }, { title: '3' }] }
          ]
        },
        `<div>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">1</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">2</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">1</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">2</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">3</var>
                </h1>
            </div>`
      )
    })
    it('should repeat element for object value thrice', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*.title"></var></h1></div>`,
        { outside: [{ items: [{ title: '0' }, { title: '1' }, { title: '2' }] }, { items: [{ title: '0' }] }] },
        `<div>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">0</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">1</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">2</var>
                </h1>
                <h1 data-path-scope="outside.*.items.*">
                    <var data-path="outside.*.items.*.title">0</var>
                </h1>
            </div>`
      )
    })
    it('should repeat element for jsonpath', function () {
      assertRenderedHTML(
        `<div><h1 data-path-scope="outside.*.items[1:3]"><var data-path="outside.*.items.*.title"></var></h1></div>`,
        { outside: [{ items: [{ title: '0' }, { title: '1' }, { title: '2' }] }, { items: [{ title: '0' }] }] },
        `<div>
                <h1 data-path-scope="outside.*.items[1:3]">
                    <var data-path="outside.*.items.*.title">1</var>
                </h1>
                <h1 data-path-scope="outside.*.items[1:3]">
                    <var data-path="outside.*.items.*.title">2</var>
                </h1>
            </div>`
      )
    })
  })

  describe('render multiplied with nested arrays and with parent context', () => {
    it('should repeat element for primitive value', function () {
      ;[
        `<div>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*"></h1>
                </section>
            </div>`,
        `<div>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                </section>
            </div>`,
        `<div>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                </section>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*"></h1>
                </section>
            </div>`,
        `<div>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                    <h1 data-path-scope="outside.*.items.*"></h1>
                </section>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*" hidden="hidden"></h1>
                </section>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*"></h1>
                </section>
            </div>`
      ].forEach((input) => {
        assertRenderedHTML(
          input,
          { outside: [{ items: ['a', 'b'] }, { items: ['a', 'b', 'c'] }] },
          `<div>
                        <section data-path-scope="outside.*">
                            <h1 data-path-scope="outside.*.items.*"></h1>
                            <h1 data-path-scope="outside.*.items.*"></h1>
                        </section>
                        <section data-path-scope="outside.*">
                            <h1 data-path-scope="outside.*.items.*"></h1>
                            <h1 data-path-scope="outside.*.items.*"></h1>
                            <h1 data-path-scope="outside.*.items.*"></h1>
                        </section>
                    </div>`
        )
      })
    })
    it('should repeat and fill element for primitive value', function () {
      ;[
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*" hidden="hidden">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*"></var>
                        </h1>
                    </section>
                </div>`
      ].forEach((input) => {
        assertRenderedHTML(
          input,
          { outside: [{ items: ['a', 'b'] }, { items: ['a', 'b', 'c'] }] },
          `<div>
                        <section data-path-scope="outside.*">
                            <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">a</var></h1>
                            <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">b</var></h1>
                        </section>
                        <section data-path-scope="outside.*">
                            <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">a</var></h1>
                            <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">b</var></h1>
                            <h1 data-path-scope="outside.*.items.*"><var data-path="outside.*.items.*">c</var></h1>
                        </section>
                    </div>`
        )
      })
    })
    it('should repeat element for object value', function () {
      ;[
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*"></h1>
                        <h1 data-path-scope="outside.*.items.*"></h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*"></h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*"></h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*"></h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*"></h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*"></h1>
                    </section>
                </div>`
      ].forEach((input) => {
        assertRenderedHTML(
          input,
          { outside: [{ items: [{ a: '1' }, { a: '2' }] }, { items: [{ a: '1' }, { a: '2' }, { c: '3' }] }] },
          `<div>
                        <section data-path-scope="outside.*">
                            <h1 data-path-scope="outside.*.items.*"></h1>
                            <h1 data-path-scope="outside.*.items.*"></h1>
                        </section>
                        <section data-path-scope="outside.*">
                            <h1 data-path-scope="outside.*.items.*"></h1>
                            <h1 data-path-scope="outside.*.items.*"></h1>
                            <h1 data-path-scope="outside.*.items.*"></h1>
                        </section>
                    </div>`
        )
      })
    })
    it('should repeat element for object value', function () {
      ;[
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*" hidden="hidden">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*" hidden="hidden">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`
      ].forEach((input) => {
        assertRenderedHTML(
          input,
          {
            outside: [
              { items: [{ title: '1' }, { title: '2' }] },
              { items: [{ title: '1' }, { title: '2' }, { title: '3' }] }
            ]
          },
          `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title">1</var>
                        </h1>
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title">2</var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title">1</var>
                        </h1>
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title">2</var>
                        </h1>
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title">3</var>
                        </h1>
                    </section>
                </div>`
        )
      })
    })
    it('should repeat element for object value thrice', function () {
      ;[
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*" hidden="hidden">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*" hidden="hidden">
                        <h1 data-path-scope="outside.*.items.*" hidden="hidden">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`
      ]
      assertRenderedHTML(
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items.*">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`,
        { outside: [{ items: [{ title: '0' }, { title: '1' }, { title: '2' }] }, { items: [{ title: '0' }] }] },
        `<div>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*">
                        <var data-path="outside.*.items.*.title">0</var>
                    </h1>
                    <h1 data-path-scope="outside.*.items.*">
                        <var data-path="outside.*.items.*.title">1</var>
                    </h1>
                    <h1 data-path-scope="outside.*.items.*">
                        <var data-path="outside.*.items.*.title">2</var>
                    </h1>
                </section>
                <section data-path-scope="outside.*">
                    <h1 data-path-scope="outside.*.items.*">
                        <var data-path="outside.*.items.*.title">0</var>
                    </h1>
                </section>
            </div>`
      )
    })
    it('should repeat element for jsonpath', function () {
      ;[
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items[1:3]">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items[1:3]">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items[1:3]">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`,
        `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items[1:3]">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                        <h1 data-path-scope="outside.*.items[1:3]">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`
      ].forEach((input) => {
        assertRenderedHTML(
          input,
          { outside: [{ items: [{ title: '0' }, { title: '1' }, { title: '2' }] }, { items: [{ title: '0' }] }] },
          `<div>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items[1:3]">
                            <var data-path="outside.*.items.*.title">1</var>
                        </h1>
                        <h1 data-path-scope="outside.*.items[1:3]">
                            <var data-path="outside.*.items.*.title">2</var>
                        </h1>
                    </section>
                    <section data-path-scope="outside.*">
                        <h1 data-path-scope="outside.*.items[1:3]" hidden="hidden">
                            <var data-path="outside.*.items.*.title"></var>
                        </h1>
                    </section>
                </div>`
        )
      })
    })
  })
  describe('Scripts', () => {
    it('should autoload scripts initially', () => {
      assertRenderedHTML(
        `<div data-embed-src="http://example.com/script.js"></div>`,
        {},
        `<div data-embed-src="http://example.com/script.js"></div>
        <script src="http://example.com/script.js" type="module"></script>`,
        ['http://example.com/script.js']
      )
    })
    it('should autoload scripts via observer', async () => {
      const element = new JSDOM('<div><h1></h1></div>').window.document.body.firstElementChild as HTMLElement
      FEAAS.observeDOMElement(element)
      element.firstElementChild.setAttribute('data-embed-src', 'http://example.com/script.js')

      return new Promise<void>((resolve) => {
        setTimeout(() => {
          assertScriptLoaded(element.closest('html'), 'http://example.com/script.js')
          resolve()
        }, 50)
      })
    })
  })
  describe('Various examples', () => {
    it('should render custom web components', () => {
      assertRenderedHTML(
        `<bx-accordion class="-embed" data-embed-src="https://1.www.s81c.com/common/carbon/web-components/version/v1.21.0/accordion.min.js">
          <bx-accordion-item data-path-scope="dominatorData.items.*" data-path-attributes="dominatorData.items.*">
          </bx-accordion-item>
        </bx-accordion>`,
        {
          dominatorData: {
            name: 'YarikZ',
            goal: 'Explode the planet',
            status: 'progressing',
            items: [
              {
                'title-text': 'Hello world',
                html: 'Hola',
                open: true
              },
              {
                'title-text': 'Bye world',
                html: 'Mystical island'
              }
            ]
          }
        },
        `<bx-accordion class="-embed" data-embed-src="https://1.www.s81c.com/common/carbon/web-components/version/v1.21.0/accordion.min.js">
        <bx-accordion-item data-path-scope="dominatorData.items.*" data-path-attributes="dominatorData.items.*" title-text="Hello world" open="" data-attributes-keys="title-text,html,open">
        Hola
        </bx-accordion-item>
        <bx-accordion-item data-path-scope="dominatorData.items.*" data-path-attributes="dominatorData.items.*" title-text="Bye world" data-attributes-keys="title-text,html">
        Mystical island
        </bx-accordion-item>
      </bx-accordion>
      <script src="https://1.www.s81c.com/common/carbon/web-components/version/v1.21.0/accordion.min.js" type="module">
      </script>`,
        null,
        null,
        true
      )
    })
  })
  describe('customizations', function () {
    it('processTemplate', function () {
      assertRenderedHTML(`<div></div>`, null, '<h1>123</h1>', [], {
        processTemplate: (element, template, data) => {
          return '<h1>123</h1>'
        }
      })
      assertRenderedHTML(`<div></div>`, null, '<div></div>', [], {
        processTemplate: (element, template, data) => {
          return null
        }
      })
      assertRenderedHTML(`<div><h1></h1></div>`, null, '<div><h1></h1></div>', [], {
        processTemplate: (element, template, data) => {
          return null
        }
      })
    })
    it('processData', function () {
      assertRenderedHTML(
        `<div data-path-custom-attribute="test"></div>`,
        { test: 'a.jpg' },
        '<div data-path-custom-attribute="test" custom-attribute="b.jpg"></div>',
        [],
        {
          processData(element, data) {
            return {
              test: 'b.jpg'
            }
          }
        }
      )
      assertRenderedHTML(
        `<div data-path-custom-attribute="test"></div>`,
        { test: 'a.jpg' },
        '<div data-path-custom-attribute="test" custom-attribute="a.jpg.gz"></div>',
        [],
        {
          processData(element, data) {
            return {
              test: data.test + '.gz'
            }
          }
        }
      )
    })
  })
})
