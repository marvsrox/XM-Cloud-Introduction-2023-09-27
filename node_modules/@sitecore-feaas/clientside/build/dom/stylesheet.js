import { fetchAndRevalidateStylesheet, getStylesheetURL } from '../cdn.js';
export function renderStylesheet(props, style) {
    renderStylesheetPromise(props, (style || (style = document.createElement('style'))));
    return style;
}
export function renderStylesheetPromise(props, stylesheet) {
    stylesheet || (stylesheet = document.createElement('style'));
    return fetchAndRevalidateStylesheet(props, (cssText, phase) => {
        stylesheet.textContent = cssText;
    }).then(() => stylesheet);
}
export function loadStylesheet(props, callback) {
    var foundStylesheet = findStylesheet(props);
    if (!foundStylesheet) {
        var createdStylesheet = createStylesheet(props);
    }
    return fetchAndRevalidateStylesheet(props, (cssText, phase) => {
        if (createdStylesheet) {
            createdStylesheet.textContent = cssText;
        }
        callback === null || callback === void 0 ? void 0 : callback(cssText, phase);
    }).then(() => foundStylesheet || createdStylesheet);
}
export function loadStylesheetAllowStale(props) {
    return new Promise((resolve, reject) => {
        loadStylesheet(props, resolve).catch(reject);
    });
}
export function findStylesheet(props) {
    return document.head.querySelector(`style[data-href="${getStylesheetURL(props)}"]`);
}
export function createStylesheet(props) {
    const url = getStylesheetURL(props);
    const stylesheet = document.createElement('style');
    stylesheet.setAttribute('data-href', url);
    document.head.appendChild(stylesheet);
    return stylesheet;
}
//# sourceMappingURL=stylesheet.js.map