import { ControlledPromise } from '../utils/promise.js';
// Shim in case it's required in node.js environment
var WebComponent = typeof HTMLElement == 'undefined'
    ? // @ts-ignore
        typeof windowJSDOM != 'undefined'
            ? // @ts-ignore
                windowJSDOM.HTMLElement
            : class {
            }
    : HTMLElement;
/**
 * FEAASBase is a superclass for FEAAS components with optional react support.
 *
 * Initialization lifecycle:
 *
 * - `set(props)`
 * - `load() => payload`
 * - `onLoad?(payload)`
 * - `update()`
 * - `render(payload, props)`
 * - `whenRendered`
 * - - / If needs to reload, e.g. bypass cache /
 * - - `onLoad(newPayload) `
 * - - `whenRendered`
 * - `whenLoaded`
 */
export class FEAASBase extends WebComponent {
    /** Return attributes as parsed values */
    getProps(context) {
        return {};
    }
    constructor() {
        super();
        this.defaultProps = {};
        /** Is/was component in the dom? */
        this.connected = false;
        this.refs = {};
        this.descendants = [];
        this.whenLoaded = ControlledPromise((payload) => {
            this.payload = payload;
        });
        this.whenRendered = ControlledPromise(() => (this.initialized = true), () => cancelAnimationFrame(this.nextRender));
        this.addEventListener('feaasMount', this);
        this.addEventListener('feaasUnmount', this);
    }
    /** Attaches shadow root if getShadowRootOptions any settings, or uses element itself */
    getRoot() {
        return this;
    }
    /** Attribute changes trigger props parsing and schedules re-rendering */
    attributeChangedCallback(name, oldValue, newValue) {
        this.set();
    }
    /** Components parses its attributes when connected, and schedules rendeirng */
    connectedCallback() {
        this.mount();
    }
    disconnectedCallback() {
        this.unmount();
    }
    /**
     * Web components are initialized depth-first, making child elements render before its parents. This could here
     * attempts to avoid this and inverts the initialization logic, so that children are initialized in the context of its
     * already-initialized parents.
     *
     * FEAAS components dispatch `feaasMount` event that allows components to store references to each other. In addition
     * it allows external scripts to listen for initialization of FEAAS components
     */
    mount() {
        try {
            const parent = this.getParent();
            // Allow parent component to initialize first
            if (parent && !parent.connected)
                return;
            if (this.connected)
                return;
            this.connected = true;
            this.log('FEAAS: Mount', this.tagName, this);
            this.dispatchEvent(new Event('feaasMount', { bubbles: true, composed: true }));
            this.getElements().map((element) => { var _a; return (_a = element.mount) === null || _a === void 0 ? void 0 : _a.call(element); });
            this.set();
        }
        catch (e) {
            this.onError(e);
        }
    }
    log(...args) {
        console.log(...args);
    }
    /** Nothing special happens on unmount, except setting a flag */
    unmount() {
        if (!this.connected)
            return;
        this.log('FEAAS: Unmount', this);
        this.dispatchEvent(new Event('feaasUnmount', { bubbles: true, composed: true }));
        this.connected = false;
    }
    getParent(onlyFeaas = true) {
        for (var p = this; (p = p.parentElement || (p.parentNode instanceof ShadowRoot ? p.parentNode.host : null));) {
            if (!onlyFeaas || p.tagName.startsWith('FEAAS-'))
                return p;
        }
    }
    getElements(root = this.getRoot(), onlyFeaas = true) {
        return Array.from(root.querySelectorAll('*'))
            .map((el) => [
            !onlyFeaas || el.tagName.startsWith('FEAAS-') ? el : null,
            el.shadowRoot ? this.getElements(el.shadowRoot, onlyFeaas) : null
        ])
            .flat()
            .filter(Boolean);
    }
    /** Catch-all event handler that dispatches events to callback */
    handleEvent(event) {
        const target = event.composedPath()[0];
        switch (event.type) {
            case 'feaasMount':
                if (target != this)
                    this.nestedCallback(target);
                break;
            case 'feaasUnmount':
                if (target != this)
                    this.unnestedCallback(target);
                break;
        }
    }
    /** Act on children element being removed */
    unnestedCallback(target) {
        const index = this.descendants.indexOf(target);
        if (index == -1)
            return;
        this.log('FEAAS: Unnest', this, target);
        this.descendants.splice(index, -1);
        this.refs[target.getComponentName()] = null;
        if (target.refs.parent == this)
            target.refs.parent = null;
        if (target.refs.top == this) {
            target.refs.top = target.refs.parent;
        }
    }
    /** Act on children element being added */
    nestedCallback(target) {
        var _a, _b;
        const index = this.descendants.indexOf(target);
        if (index != -1)
            return;
        this.descendants.push(target);
        this.log('FEAAS: Nest', this, target);
        this.refs[target.getComponentName()] = target;
        target.refs.top = this;
        (_a = target.refs).parent || (_a.parent = this);
        if (target.render) {
            for (var p = target.refs.parent; p; p = p.refs.parent) {
                if (p.render) {
                    (_b = target.refs).parentReact || (_b.parentReact = p);
                    target.refs.topReact = p;
                }
            }
        }
    }
    getComponentName() {
        return this.tagName.replace('FEAAS-', '').toLowerCase();
    }
    /**
     * Check if lazy component is ready to be loaded. For example a component may stay unloaded unless certain attributes
     * are set
     */
    isReadyToLoad() {
        return this.payload === undefined && this.getAttribute('hidden') == null;
    }
    /** Generic error handler */
    onError(error, where = 'uncaught', handled = false) {
        const event = new CustomEvent('feaasError', { bubbles: true, composed: true, detail: error });
        this.dispatchEvent(event);
        this.whenLoaded.reject(error);
        if (!event.defaultPrevented && !handled) {
            this.whenRendered.reject(error);
            try {
                this.unmount();
            }
            catch (e) { }
            return true;
        }
        return false;
    }
    shouldUpdateOnLoad() {
        return true;
    }
    /** Load lazy component & render */
    async advance() {
        try {
            if (this.payload === undefined) {
                if (!this.isReadyToLoad())
                    return;
                this.payload = null;
                this.dispatchEvent(new Event('feaasLoad', { bubbles: true, composed: true }));
                const loaded = await this.load().catch((e) => {
                    this.payload = undefined;
                    throw e;
                });
                this.whenLoaded.resolve(loaded);
                // Allow component to handle the post-loading
                if (this.onLoad) {
                    return;
                }
            }
            else if (this.payload == null) {
                return;
            }
            this.flush();
            this.whenRendered.resolve(this);
        }
        catch (e) {
            this.onError(e);
        }
    }
    flush() {
        var _a, _b;
        const flushSync = (_b = (_a = this.payload) === null || _a === void 0 ? void 0 : _a.ReactDOM) === null || _b === void 0 ? void 0 : _b.flushSync;
        if (flushSync) {
            flushSync(() => this.update());
        }
        else {
            this.update();
        }
    }
    /** Invoke preloading logic that needs to finish before component can render */
    load() {
        return Promise.resolve(null);
    }
    /**
     * Component-specific logic that updates the DOM. Default render implementation assume react rendering, in that case
     * the component needs to provide React & ReactDOM references in its payload. Web component redefine its render to not
     * use react at all
     */
    update() {
        var _a, _b, _c;
        //this.log('FEAAS: React', this.tagName, this.payload)
        if (this.payload == null)
            return;
        if (!this.render)
            return;
        const { React, ReactDOM, ReactDOMClient } = this.payload || {};
        if (!React)
            throw new Error(`${this.tagName}: React is not present in payload`);
        if (!ReactDOM)
            throw new Error(`${this.tagName}: ReactDOM is not present in payload`);
        if (!this.refs.topReact && !this.forceUpdateReact) {
            if (ReactDOMClient) {
                this.reactRoot || (this.reactRoot = ReactDOMClient.createRoot(this.getReactRootElement()));
                this.reactRoot.render(this.getReactElement());
            }
            else {
                ReactDOM.render(this.getReactElement(), this.getReactRootElement());
            }
        }
        else if (this.forceUpdateReact) {
            (_a = this.forceUpdateReact) === null || _a === void 0 ? void 0 : _a.call(this);
        }
        else {
            (_c = (_b = this.refs.topReact).forceUpdateReact) === null || _c === void 0 ? void 0 : _c.call(_b);
        }
    }
    invokeReactRendering() {
        const { React, ReactDOM } = this.payload || {};
        if (!this.connected)
            return null;
        const children = this.descendants
            .filter((r) => {
            return r.refs.parentReact == this && r.payload;
        })
            .map((child, index) => {
            return this.getReactElement(child);
        });
        return this.render({ ...this.props, children }, this.payload);
    }
    getReactErrorBoundary(target = this, displayName = target.tagName) {
        if (this.reactErrorBoundary)
            return this.reactErrorBoundary;
        const { React, ReactDOM } = target.payload || {};
        return (this.reactErrorBoundary || (this.reactErrorBoundary = class FEAASErrorBoundary extends React.Component {
            constructor() {
                super(...arguments);
                this.state = {
                    error: null
                };
            }
            static getDerivedStateFromError(error) {
                return { error: error };
            }
            componentDidCatch(error, errorInfo) {
                console.error(`FEAAS: ${target.tagName} Error:`, error, errorInfo);
                target.onError(error, 'react');
                //this.setState({ error: error })
            }
            render() {
                if (this.state.error) {
                    // target.classList.add('feaas-error')
                    return;
                    //return <h1>There seems to be a problem.</h1>
                }
                //if (target.classList.contains('feaas-error')) target.classList.remove('feaas-error')
                return this.props.children;
            }
        }));
    }
    getReactElement(target = this, props) {
        const { React, ReactDOM } = target.payload || {};
        const ErrorBoundary = this.getReactErrorBoundary();
        const Wrapper = this.getReactWrapper(target);
        return (React.createElement(ErrorBoundary, { key: target.tagName + '-' + target.getUID(), slot: target.getAttribute('slot') },
            React.createElement(Wrapper, null)));
    }
    getReactWrapper(target = this, displayName = target.tagName) {
        if (target.reactWrapper)
            return target.reactWrapper;
        const { React, ReactDOM } = target.payload || {};
        target.reactWrapper = (props) => {
            if (target.render) {
                const [value, forceUpdateReact] = React.useReducer((r) => r + 1, 0);
                target.forceUpdateReact = forceUpdateReact;
                return ReactDOM.createPortal(React.createElement(React.Fragment, null, target.invokeReactRendering()), target.getReactRootElement());
            }
            else {
                return target.update();
            }
        };
        Object.assign(target.reactWrapper, {
            key: target.tagName + '-' + target.getUID(),
            displayName: displayName
        });
        return target.reactWrapper;
    }
    getUID() {
        return (this.uid || (this.uid = String(Math.random())));
    }
    getShadowRoot() {
        if (!this.shadowRoot) {
            this.attachShadow({ mode: 'open' });
        }
        return this.shadowRoot;
    }
    getReactRootElement() {
        return this.useShadowRoot ? this.getShadowRoot() : this.getRoot();
    }
    /** Set props and return values on new next tick */
    set(overrides) {
        try {
            this.scheduleRender();
            this.overrides = {
                ...this.overrides,
                ...overrides
            };
            this.props = {
                ...this.getProps(),
                ...this.overrides
            };
            for (var property in this.props) {
                const value = this.props[property];
                const attribute = property.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                if (value == null || value === this.defaultProps[property]) {
                    this.removeAttribute(attribute);
                }
                else if (typeof value == 'string' || typeof value == 'number' || typeof value == 'boolean') {
                    if (this.getAttribute(attribute) != String(value))
                        this.setAttribute(attribute, String(value));
                }
            }
        }
        catch (e) {
            this.whenRendered.reject(e);
            this.onError(e, 'set');
        }
        return this;
    }
    import(path) {
        return import(/* @vite-ignore */ /* webpackIgnore: true */ path);
    }
    scheduleRender() {
        if (this.nextRender == null) {
            this.whenRendered = this.whenRendered.restart();
        }
        cancelAnimationFrame(this.nextRender);
        this.nextRender = requestAnimationFrame(() => {
            this.nextRender = null;
            this.advance().catch((e) => { });
        });
    }
    formatURL(src, hostname) {
        if (typeof src == 'string' && src.match(/^\/[^\/]/)) {
            return hostname + src;
        }
        else {
            return src;
        }
    }
    getContextAttribute(name, element = this) {
        for (var p = this; (p = p.parentElement || (p.parentNode instanceof ShadowRoot ? p.parentNode.host : null));) {
            if (p.getAttribute(name) != null)
                return p.getAttribute(name);
        }
        return this.getAttribute(name);
    }
    static register(tagName, win) {
        if (win == null)
            win = typeof window != 'undefined' ? window : null;
        if (win && !win.customElements.get(tagName)) {
            win.customElements.define(tagName, this);
        }
    }
}
export { FEAASBase as Base };
//# sourceMappingURL=FEAASBase.js.map