import { DEFAULT_CDN_URL, fetchAndRevalidateComponent, parseComponentSource } from '../cdn.js';
import { renderDOMContent, renderDOMElement } from '../dom/rendering.js';
import { loadStylesheetAllowStale } from '../headless.js';
import { FEAASBase } from './FEAASBase.js';
export function FEAASComponentsProps(element = this) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let data;
    const src = element.getAttribute('src');
    if (src) {
        const parsed = parseComponentSource(src);
        if (!parsed)
            throw new Error(`Could not parse FEAAS Component source: ${src}`);
        var { cdn, library, component, version, revision } = parsed;
    }
    const dataValue = element.getAttribute('data');
    if (dataValue != null && dataValue != '') {
        try {
            data = typeof dataValue == 'string' ? JSON.parse(dataValue) : {};
        }
        catch (e) { }
    }
    return {
        data: data || {},
        cdn: (_b = (_a = element.getContextAttribute('cdn')) !== null && _a !== void 0 ? _a : cdn) !== null && _b !== void 0 ? _b : DEFAULT_CDN_URL,
        library: (_c = element.getAttribute('library')) !== null && _c !== void 0 ? _c : library,
        component: (_d = element.getAttribute('component')) !== null && _d !== void 0 ? _d : component,
        version: (_f = (_e = element.getAttribute('version')) !== null && _e !== void 0 ? _e : version) !== null && _f !== void 0 ? _f : 'responsive',
        revision: ((_h = (_g = element.getAttribute('revision')) !== null && _g !== void 0 ? _g : revision) !== null && _h !== void 0 ? _h : 'published'),
        hostname: element.getAttribute('hostname'),
        template: element.getAttribute('template'),
        instance: element.getAttribute('instance'),
        editable: element.getAttribute('editable') != null,
        suspended: element.getAttribute('suspended') != null,
        lastModified: element.getAttribute('last-modified'),
        withStylesheet: element.getAttribute('with-stylesheet') != 'false'
    };
}
export class FEAASComponent extends FEAASBase {
    setData(data) {
        this.set({ data });
    }
    getProps() {
        return FEAASComponentsProps(this);
    }
    attributeChangedCallback(name, oldValue, newValue) {
        if (oldValue === newValue)
            return;
        // force component to be refreshed
        if (name == 'library' || name == 'component' || name == 'revision' || name == 'version') {
            this.payload = undefined;
        }
        this.needsRefresh = true;
        super.attributeChangedCallback(name, oldValue, newValue);
    }
    getEditor() {
        var _a;
        return (_a = document.querySelector('feaas-context')) === null || _a === void 0 ? void 0 : _a.refs.editor;
    }
    constructor() {
        super();
        this.defaultProps = {
            cdn: DEFAULT_CDN_URL,
            revision: 'published',
            version: 'responsive',
            withStylesheet: true,
            editable: false,
            suspended: false
        };
        this.onLoad = (html) => {
            this.payload = html;
            this.advance();
        };
        this.addEventListener('click', () => {
            if (this.props.editable) {
                this.edit();
            }
        });
    }
    edit() {
        const editor = this.getEditor();
        if (editor === null || editor === void 0 ? void 0 : editor.setTarget(this)) {
            editor.open();
            return true;
        }
    }
    /* Check if component is a repeated clone, and return the original */
    getOriginal() {
        const scope = this.getAttribute('data-path-scope');
        if (!scope)
            return;
        for (var current = this; (current = current.previousElementSibling);) {
            if (current.getAttribute('data-path-scope') == scope) {
                var last = current;
            }
            else {
                break;
            }
        }
        return last;
    }
    isReadyToLoad() {
        return (super.isReadyToLoad() && this.props.library != null && this.props.component != null && this.props.version != null);
    }
    async load() {
        // defer loading to original element
        if (this.getOriginal()) {
            return;
        }
        if (this.props.withStylesheet) {
            var stylesheetPromise = loadStylesheetAllowStale({ ...this.props, revision: 'published' }).then(() => {
                stylesheetPromise = null;
                if (this.payload) {
                    this.onLoad(this.payload);
                }
            });
        }
        return Promise.all([
            stylesheetPromise,
            fetchAndRevalidateComponent(this.props, (html) => {
                this.payload = html;
                if (!stylesheetPromise)
                    this.onLoad(html);
            })
        ]).then(() => this.payload);
    }
    update() {
        if (Array.from(this.children).filter((c) => c.tagName != 'BR').length > 0 && !this.needsRefresh) {
            renderDOMElement(this, this.props.data);
        }
        else {
            this.needsRefresh = true;
            // defer rendering to original element
            if (this.getOriginal()) {
                return;
            }
            renderDOMContent(this, this.payload, this.props.data);
        }
    }
}
FEAASComponent.observedAttributes = [
    'library',
    'component',
    'version',
    'revision',
    'hostname',
    'cdn',
    'template',
    'data',
    'instance',
    'editable',
    'with-stylesheet'
];
FEAASComponent.register('feaas-component');
export { FEAASComponent as Component, FEAASComponentsProps as ComponentProps };
//# sourceMappingURL=FEAASComponent.js.map