import { FEAASBase } from './FEAASBase.js';
export default class FEAASElement extends FEAASBase {
    load() {
        return Promise.all([
            // @ts-ignore @webpack-ignore
            import('https://cdn.skypack.dev/react'),
            // @ts-ignore
            import('https://cdn.skypack.dev/react-dom')
        ]).then(([React, ReactDOM]) => {
            return { React, ReactDOM };
        });
    }
    render({}, { React }) {
        return React.createElement(React.Fragment, null);
    }
}
export class MyComponent extends FEAASElement {
    constructor() {
        super(...arguments);
        this.useShadowRoot = true;
    }
    // parse attributes from web component to react-ready form
    getProps() {
        return {
            counter: parseFloat(this.getAttribute('counter'))
        };
    }
    // First argument is props, second arguments is React stuff
    // Destructuring React is important for JSX to work
    render({ counter }, { React }) {
        const [updates, setUpdates] = React.useState(0);
        React.useEffect(() => {
            setUpdates((u) => u + 1);
        }, [counter]);
        return (React.createElement(React.Fragment, null,
            React.createElement("p", null,
                "Rendering attribute: ",
                counter),
            React.createElement("p", null,
                "Triggered updates: ",
                updates)));
    }
}
// will re-render component if any of these attributes have changed
MyComponent.observedAttributes = ['counter'];
//# sourceMappingURL=FEAASElement.js.map