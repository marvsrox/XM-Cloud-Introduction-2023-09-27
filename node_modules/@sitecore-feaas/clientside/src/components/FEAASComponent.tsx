import { DEFAULT_CDN_URL, FEAASCDNComponentParams, fetchAndRevalidateComponent, parseComponentSource } from '../cdn.js'
import { renderDOMContent, renderDOMElement } from '../dom/rendering.js'
import { loadStylesheetAllowStale } from '../headless.js'
import { FEAASBase } from './FEAASBase.js'

export function FEAASComponentsProps(element: FEAASBase = this) {
  let data: any
  const src = element.getAttribute('src')
  if (src) {
    const parsed = parseComponentSource(src)
    if (!parsed) throw new Error(`Could not parse FEAAS Component source: ${src}`)
    var { cdn, library, component, version, revision } = parsed
  }
  const dataValue = element.getAttribute('data')
  if (dataValue != null && dataValue != '') {
    try {
      data = typeof dataValue == 'string' ? JSON.parse(dataValue) : {}
    } catch (e) {}
  }
  return {
    data: data || {},
    cdn: element.getContextAttribute('cdn') ?? cdn ?? DEFAULT_CDN_URL,
    library: element.getAttribute('library') ?? library,
    component: element.getAttribute('component') ?? component,
    version: element.getAttribute('version') ?? version ?? 'responsive',
    revision: (element.getAttribute('revision') ?? revision ?? 'published') as FEAASCDNComponentParams['revision'],
    hostname: element.getAttribute('hostname'),
    template: element.getAttribute('template'),
    instance: element.getAttribute('instance'),
    editable: element.getAttribute('editable') != null,
    suspended: element.getAttribute('suspended') != null,
    lastModified: element.getAttribute('last-modified'),
    withStylesheet: element.getAttribute('with-stylesheet') != 'false'
  }
}
export type FEAASComponentsProps = ReturnType<typeof FEAASComponentsProps>
export class FEAASComponent extends FEAASBase<FEAASComponentsProps, string> {
  static observedAttributes = [
    'library',
    'component',
    'version',
    'revision',
    'hostname',
    'cdn',
    'template',
    'data',
    'instance',
    'editable',
    'with-stylesheet'
  ]

  defaultProps = {
    cdn: DEFAULT_CDN_URL,
    revision: 'published',
    version: 'responsive',
    withStylesheet: true,
    editable: false,
    suspended: false
  } as Partial<FEAASComponentsProps>

  needsRefresh: boolean
  setData(data: any) {
    this.set({ data })
  }

  getProps() {
    return FEAASComponentsProps(this)
  }

  attributeChangedCallback(name: string, oldValue: string, newValue: string): void {
    if (oldValue === newValue) return
    // force component to be refreshed
    if (name == 'library' || name == 'component' || name == 'revision' || name == 'version') {
      this.payload = undefined
    }
    this.needsRefresh = true
    super.attributeChangedCallback(name, oldValue, newValue)
  }

  getEditor(): any {
    return (document.querySelector('feaas-context') as FEAASBase)?.refs.editor
  }

  constructor() {
    super()
    this.addEventListener('click', () => {
      if (this.props.editable) {
        this.edit()
      }
    })
  }

  edit() {
    const editor = this.getEditor()
    if (editor?.setTarget(this)) {
      editor.open()
      return true
    }
  }

  /* Check if component is a repeated clone, and return the original */
  getOriginal() {
    const scope = this.getAttribute('data-path-scope')
    if (!scope) return
    for (var current = this as Element; (current = current.previousElementSibling); ) {
      if (current.getAttribute('data-path-scope') == scope) {
        var last = current
      } else {
        break
      }
    }
    return last as FEAASComponent
  }

  isReadyToLoad() {
    return (
      super.isReadyToLoad() && this.props.library != null && this.props.component != null && this.props.version != null
    )
  }

  onLoad = (html: string) => {
    this.payload = html
    this.advance()
  }

  async load() {
    // defer loading to original element
    if (this.getOriginal()) {
      return
    }
    if (this.props.withStylesheet) {
      var stylesheetPromise = loadStylesheetAllowStale({ ...this.props, revision: 'published' }).then(() => {
        stylesheetPromise = null
        if (this.payload) {
          this.onLoad(this.payload)
        }
      })
    }
    return Promise.all([
      stylesheetPromise,
      fetchAndRevalidateComponent(this.props, (html) => {
        this.payload = html
        if (!stylesheetPromise) this.onLoad(html)
      })
    ]).then(() => this.payload)
  }

  update() {
    if (Array.from(this.children).filter((c) => c.tagName != 'BR').length > 0 && !this.needsRefresh) {
      renderDOMElement(this, this.props.data)
    } else {
      this.needsRefresh = true
      // defer rendering to original element
      if (this.getOriginal()) {
        return
      }
      renderDOMContent(this, this.payload, this.props.data)
    }
  }
}

declare global {
  namespace JSX {
    interface IntrinsicElements {
      'feaas-component': {
        data?: any
        template?: string
        instance?: string
        editable?: boolean
        children?: any
        dangerouslySetInnerHTML?: { __html: string }
        'last-modified'?: string
        'with-stylesheet'?: 'false' | 'true' | ''
      } & (
        | {
            /** @deprecated Use cdn instead */
            hostname?: string
            cdn?: string
            library: string
            component: string
            version?: string
            revision?: FEAASComponentsProps['revision']
          }
        | { src: string }
        | { template: string }
      )
    }
  }
}
FEAASComponent.register('feaas-component')

export { FEAASComponent as Component, FEAASComponentsProps as ComponentProps }
