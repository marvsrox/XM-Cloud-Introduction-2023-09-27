import React from 'react'
import ReactDOM from 'react-dom'
import { FEAASBase } from '../components/FEAASBase.js'
import { ReactJSX, ReactModules } from '../components/FEAASElement.js'
import { kebabCase, reverseKebabCase } from '../utils/string.js'

const convertSchemaPropertiesToKebabCase = (schema: any) => {
  if (!schema) return

  let kebabSchemaProperties, kebabRequiredProperties
  if (schema.properties) {
    kebabSchemaProperties = Object.keys(schema.properties).reduce((acc: { [key: string]: string }, key) => {
      acc[kebabCase(key)] = schema.properties[key]
      return acc
    }, {})

    kebabRequiredProperties = schema.required.map((item: string) => kebabCase(item))
  }
  return { ...schema, properties: kebabSchemaProperties, required: kebabRequiredProperties }
}

export function FEAASExternalProps(element: FEAASBase = this) {
  const attributes = element.getAttributeNames()
  const props = attributes.reduce((prev, curr) => {
    if (!curr.startsWith('data-attribute') && !['class', 'id', 'contenteditable'].includes(curr))
      return { ...prev, [reverseKebabCase(curr)]: element.getAttribute(curr) }
    else return prev
  }, {})
  return props
}

export type RegisteredComponents = { [id: string]: { component: React.ElementType; schema: any } }
export type FEAASExternalProps = ReturnType<typeof FEAASExternalProps> & { dataExternalId: string }

export default class FEAASExternal extends FEAASBase<FEAASExternalProps, ReactModules> {
  static registered: RegisteredComponents = {}
  static registrationCallback: NodeJS.Timeout
  load() {
    return Promise.resolve({ React, ReactDOM })
  }

  render(props: FEAASExternalProps, { React }: ReactModules): ReactJSX {
    const { dataExternalId: id } = props
    const Component = FEAASExternal.registered[id]?.component
    if (!Component) console.warn('FEAASExternal: The component you requested is not registered')
    return <>{Component && <Component {...props} />}</>
  }

  getProps() {
    return FEAASExternalProps(this)
  }

  static registerComponent(component: React.FC, schema: any = {}, id?: string) {
    FEAASExternal.registered[id || component.name] = { component, schema }
  }

  static setRegistrationCallback() {
    // if registerCallback has not already been triggered by another component, set it
    if (!FEAASExternal.registrationCallback && typeof window !== 'undefined') {
      FEAASExternal.registrationCallback = setTimeout(() => {
        // create components array from object
        const components = Object.keys(FEAASExternal.registered).map((name) => ({
          ...FEAASExternal.registered[name],
          name,
          schema: convertSchemaPropertiesToKebabCase(FEAASExternal.registered[name].schema),
          component: FEAASExternal.registered[name].component.toString()
        }))
        // send components from iframe to parent window
        window?.parent?.postMessage(
          JSON.stringify({
            action: 'register-components',
            data: components
          }),
          window?.parent?.origin
        )
      }, 500)
    }
  }

  static loadComponents() {
    const components = JSON.parse(sessionStorage.getItem('feaas-external-components'))
    components.forEach((c: { name: string; schema: any; component: React.FC }) => {
      const name = c.name
      const schema = c.schema
      const component = eval('(' + c.component + ')')
      FEAASExternal.registerComponent(component, schema, name)
    })
  }
}

declare global {
  namespace JSX {
    interface IntrinsicElements {
      'feaas-external': {
        'data-external-id': string
        children?: any
        dangerouslySetInnerHTML?: { __html: string }
        [key: string]: any
      }
    }
  }
}

FEAASExternal.register('feaas-external')
FEAASExternal.setRegistrationCallback()

export { FEAASExternal as External }
